"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Filename   : vimrc                                                          "
" Author     : Michael DeBusk (https://github.com/mdebusk/)                   "
" Created    : 2016                                                           "
" Last edit  : 2022-06-21 00:22                                               "
" Purpose    : Initialization file for vim                                    "
" Reference  : https://vimhelp.org/
" Depends    : vim                                                            "
" Arguments  : none                                                           "
" Known bugs : NKA                                                            "
" To do      : none yet                                                       "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" ** 1. Important {{{
set nocompatible         "Turn off vi-compatible mode
" I'm not quite ready to do this next move
"" set runtimepath=$XDG_CONFIG_HOME/vim,$XDG_CONFIG_HOME/vim/after,$VIM,$VIMRUNTIME
" End Important }}}

" ** 2. Moving around, searching and patterns {{{
set autochdir            "Automatically change working directory to that of open file
set ignorecase           "ignore case when using a search pattern
set incsearch            "show match for partly-typed search command
set path+=**             "Search down into subfolders
set smartcase            "override 'ignorecase' when pattern has upper case characters
" End Moving around, searching and patterns }}}

" ** 3. Tags {{{
" End Tags }}}

" ** 4. Displaying text {{{
set cmdheight=2          "Set the command window height to 2 lines
set fillchars+=fold:·    " Set fill character for folds
set lazyredraw           "Don’t update screen during macro and script execution
set list                 "Show whitespace characters
"List of strings used for list mode
set listchars=tab:╠═,trail:░,nbsp:▃,leadmultispace:┊\ \ \ ,
set nowrap               "Turn off word wrapping
set number               "Enable line numbering, taking up 6 spaces
set numberwidth=5        "Set line numbering to take up 5 spaces
"" set relativenumber       "Show line numbers relative to current line
set sidescrolloff=5      "Number of columns to show around the cursor
set scrolloff=3          "Number of lines to show around the cursor
"" set scrolloff=999        " Keeps cursor line centered on screen
augroup numbertoggle     "Toggles relativenumber on and off based on mode
    autocmd!
    autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
    autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END
" End Displaying text }}}

" ** 5. Syntax highlighting and spelling {{{
filetype indent plugin on "indent depends on filetype
set background=dark
set colorcolumn=+1        "Show the column where text would wrap
set cursorline            "Highlight current line
set hlsearch              "Highlight searches
syntax enable
" End Syntax highlighting and spelling }}}

" ** 6. Multiple Windows {{{
set hidden               "Allow easier switching between files
set laststatus=2         "Always display the status line
set splitbelow           "New horizontal split opens below the existing one
set splitright           "New vertical split opens right of the existing one
" Initiate statusline {{{2
set statusline=                            "Start with an empty statusline
set statusline+=[%02n]                     "Buffer number
set statusline+=\ %F%m%r%h%w               "File path, modified, r/o, help, preview
set statusline+=\ [Fmt\:%{&ff}]            "file format
set statusline+=\ [Type\:%Y]               "Filetype
set statusline+=\ [ASC\:%04.4b]         "ASCII code of character under cursor
set statusline+=\ [HEX\:%04.4B]           "Hex code of character under cursor
set statusline+=%=                         "Move to right side of the line
set statusline+=\ [Line\:%04l,\ Col\:%03v] "Cursor location
set statusline+=\ [%3p%%]                  "Percentage through file
set statusline+=\ [Lines\:%L]              "Total lines in file
" set statusline+=%#color#%
" End statusline }}}
" End Multiple Windows }}}

" ** 7. Multiple tab pages {{{
" End Multiple tab pages }}}

" ** 8. Terminal {{{
set term=alacritty       "Which terminal shall vim run?
set title                "show title in console title bar
set ttyfast              "smoother changes
" End Terminal }}}

" ** 9. Using the mouse {{{
set mousefocus                        "May as well use it if it's there
" End Using the mouse }}}

" ** 10. GUI {{{
if has("gui_running")
    let g:solarized_menu=0            "Activate menu for Solarized color scheme
    set guifont=Azeret\ Mono\ 12      "Set the font and size
    set guioptions-=l                 "Remove left scrollbar
    set guioptions-=R                 "Remove right scrollbar if vsplit
    set guioptions-=b                 "Remove bottom scrollbar
    set guioptions-=F                 "Remove footer from Motif
    set guioptions-=L                 "Remove left scrollbar if vsplit
    set guioptions-=T                 "Remove toolbar
    set guioptions-=m                 "Remove menu bar
    set guioptions-=r                 "Remove right scrollbar
    ""set lines=43 columns=120         "Not useful with a tiling window manager
    ""set lines=999 columns=999        "Creates a pseudo-fullscreen gvim
endif
" End GUI }}}

" ** 11. Printing {{{
set printdevice=pdf     "Use PDF printer
set printoptions=paper:letter,syntax:y,wrap:y,duplex:long
" End Printing }}}

" ** 12. Messages and info {{{
set confirm              "ask if you wish to save changed files
set ruler                "show the cursor position all the time
set showcmd              "Show partial commands in the status line
set visualbell           "Use visual bell instead of beeping when doing something wrong
" End Messages and info }}}

" ** 13. Selecting text {{{
" End Selecting text }}}

" ** 14. Editing text {{{
set complete+=kspell
set completeopt=menuone,longest
set nojoinspaces
set omnifunc=syntaxcomplete#Complete
set matchpairs+=<:>      "Add angle brackets to matchpairs
set nrformats-=octal     "Remove octal from auto-increment and auto-decrement
set undodir=$XDG_STATE_HOME/vim/undo,~/,/tmp
set undofile              "Save and restorre undo file
""set textwidth=80        "Set text width, where text would wrap if it did
""set wrapmargin=80
" End Editing text }}}

" ** 15. Tabs and indenting {{{
set autoindent           "Automatically set the indent of a new line
set expandtab            "turn tabs into whitespace
set shiftround           " use multiple of shiftwidth when indenting with '<' and '>'
set shiftwidth=4         "Indent width for autoindent
set smartindent          "Turn on smart indent
set softtabstop=4        "Number of spaces a tab counts when editing
set tabstop=4            "set tab character to 4 characters
" End Tabs and indenting }}}

" ** 16. Folding {{{
set foldlevel=99
set foldmethod=marker
" End Folding }}}

" ** 17. Diff mode {{{
" End Diff mode }}}

" ** 18. Mapping {{{
"Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200

" In case you open a file without sudo permissions
cnoremap w!! execute 'silent! write !sudo tee % >/dev/null' <bar> edit!

" Open help in a vertical split and to the right
cnoremap help vertical botright help

"Map Y to act like D and C, i.e. to yank until EOL, rather than act as yy,
"which is the default
map Y y$

"Map <C-L> (redraw screen) to also turn off search highlighting until the
"next search
nnoremap <C-L> :nohl<CR><C-L>

" Disable arrow movement; resize splits instead.
nnoremap <Up> :resize +2<CR>
nnoremap <Down> :resize -2<CR>
nnoremap <Left> :vertical resize +2<CR>
nnoremap <Right> :vertical resize -2<CR>

" Keep the cursor centered during search and join
nnoremap n nzzzv
nnoremap N Nzzzv
nnoremap J mzJ`z

" Undo break points
inoremap , ,<c-g>u
inoremap . .<c-g>u
inoremap ! !<c-g>u
inoremap ? ?<c-g>u

" Don't leave visual mode when (un)indenting
vnoremap < <gv
vnoremap > >gv

" Autoclose mappings {{{2
" https://alldrops.info/posts/vim-drops/2019-02-13_custom-autoclose-mappings/
" autoclose and position cursor to write text inside
"" inoremap ' ''<left>
"" inoremap ` ``<left>
"" inoremap " "<left>
"" inoremap ( ()<left>
"" inoremap [ []<left>
"" inoremap { {}<left>
""autoclose with ; and position cursor to write text inside
"" inoremap '; '';<left><left>
"" inoremap `; ``;<left><left>
"" inoremap "; "";<left><left>
"" inoremap (; ();<left><left>
"" inoremap [; [];<left><left>
"" inoremap {; {};<left><left>
""autoclose with , and position cursor to write text inside
"" inoremap ', '',<left><left>
"" inoremap `, ``,<left><left>
"" inoremap ", "",<left><left>
"" inoremap (, (),<left><left>
"" inoremap [, [],<left><left>
"" inoremap {, {},<left><left>
""autoclose and position cursor after
"" inoremap '<tab> ''
"" inoremap `<tab> ``
"" inoremap "<tab> ""
"" inoremap (<tab> ()
"" inoremap [<tab> []
"" inoremap {<tab> {}
""autoclose with ; and position cursor after
"" inoremap ';<tab> '';
"" inoremap `;<tab> ``;
"" inoremap ";<tab> "";
"" inoremap (;<tab> ();
"" inoremap [;<tab> [];
"" inoremap {;<tab> {};
""autoclose with , and position cursor after
"" inoremap ',<tab> '',
"" inoremap `,<tab> ``,
"" inoremap ",<tab> "",
"" inoremap (,<tab> (),
"" inoremap [,<tab> [],
"" inoremap {,<tab> {},
""autoclose 2 lines below and position cursor in the middle
"" inoremap '<CR> '<CR>'<ESC>O
"" inoremap `<CR> `<CR>`<ESC>O
"" inoremap "<CR> "<CR>"<ESC>O
"" inoremap (<CR> (<CR>)<ESC>O
"" inoremap [<CR> [<CR>]<ESC>O
"" inoremap {<CR> {<CR>}<ESC>O
""autoclose 2 lines below adding ; and position cursor in the middle
"" inoremap ';<CR> '<CR>';<ESC>O
"" inoremap `;<CR> `<CR>`;<ESC>O
"" inoremap ";<CR> "<CR>";<ESC>O
"" inoremap (;<CR> (<CR>);<ESC>O
"" inoremap [;<CR> [<CR>];<ESC>O
"" inoremap {;<CR> {<CR>};<ESC>O
""autoclose 2 lines below adding , and position cursor in the middle
"" inoremap ',<CR> '<CR>',<ESC>O
"" inoremap `,<CR> `<CR>`,<ESC>O
"" inoremap ",<CR> "<CR>",<ESC>O
"" inoremap (,<CR> (<CR>),<ESC>O
"" inoremap [,<CR> [<CR>],<ESC>O
"" inoremap {,<CR> {<CR>},<ESC>O
" End Autoclose mappings }}}
" End Mapping }}}

" ** 19. Reading and writing files {{{
set autowrite            "Writes file when switching to another buffer
set backup               "keep a backup file
set backupdir=$XDG_STATE_HOME/vim/backup,~/,/tmp "location of backup files
" https://www.techrepublic.com/article/turn-off-modeline-support-in-vim/
set modelines=0          "Do not check for existing modelines
set nomodeline           "Disable modeline support
" End Reading and writing files }}}

" ** 20. The swap file {{{
set directory=$XDG_STATE_HOME/vim/swap,~/,/tmp
" End The swap file }}}

" ** 21. Command line editing {{{
set wildmenu             "turn on command line completion wild style
" Ignore the following extensions when using wildmenu
set wildignore=.svn,CVS,.git,*.o,*.a,*.class,*.mo,*.la,*.so,*.obj,*.swp,*.jpg,*.png,*.xpm,*.gif,*.pdf,*.bak,*.beam
" End Command line editing }}}

" ** 22. Running external commands {{{
" End Running external commands }}}

" ** 23. Running make and jumping to errors {{{
" End Running make and jumping to errors }}}

" ** 24. Language-specific {{{
" End Language-specific }}}

" ** 25. Multi-byte characters {{{
set encoding=utf-8       "Use an encoding that supports unicode.
" End Multi-byte characters }}}

" ** 26. Various {{{
set bufhidden=hide       "Hide buffer when not in window
set signcolumn=yes
set viminfo=%,<800,'10,/50,:100,h,f0,n$XDG_STATE_HOME/vim/viminfo
" End Various }}}

" ** Color scheme {{{
set t_Co=16
let g:solarized_termcolors=16
let g:solarized_termtrans=1
colorscheme solarized
highlight Comment cterm=italic gui=italic
" End Color scheme }}}

" ** Customized file types {{{
augroup views            "Back up and restore views on buffer open
    autocmd!
    au BufWinLeave ?* mkview
    au BufWinEnter ?* silent loadview
augroup END

augroup markdown {{{2
    au BufNewFile,BufRead *.md :set iskeyword=@,48-57,_,-,192-255
    au BufNewFile,BufRead *.md :iab (c) &#169;
    au BufNewFile,BufRead *.md :iab (r) &#174;
    au BufNewFile,BufRead *.md :iab -- &#8211;
    au BufNewFile,BufRead *.md :iab --- &#8212;
    au BufNewFile,BufRead *.md :iab (tm) &#8482;
    let g:markdown_fenced_languages = ['html', 'python', 'bash=sh', 'sql']
augroup END " markdown }}}

augroup filetype_LaTeX {{{2
    autocmd!
    " copy document template into empty new buffer
    au BufNewFile *.tex
                \ 0r $HOME/Templates/latex_document.tex

    au BufNewFIle,BufRead *.tex :iab latex \LaTeX\
    map <F9> :!pdflatex %<CR>
augroup END "}}}

augroup filetype_bash {{{2
    autocmd!
    " copy script template into empty new buffer
    au BufNewFile *.sh
                \ 0r $HOME/Templates/shell_script.sh
augroup END "}}}

augroup filetype_python {{{2
    " Delete all trailing whitespace before saving
    au BufWritePre *.py :%s/\s\+$//e
    " copy script template into empty new buffer
    au BufNewFile *.py
                \ 0r $HOME/Templates/python_script.py
    au BufNewFile,BufRead *.py
                \ set tabstop=4 |
                \ set softtabstop=4 |
                \ set shiftwidth=4 |
                \ set textwidth=79 |
                \ set expandtab |
                \ set autoindent |
                \ set smartindent |
                \ set colorcolumn=80 |
                \ set fileformat=unix
augroup END "}}}

augroup web_development {{{2
    au BufNewFile,BufRead *.js, *.html, *.css, *.php
                \ set tabstop=2 |
                \ set softtabstop=2 |
                \ set shiftwidth=2

    " copy HTML document template into empty new buffer
    au bufnewfile *.html
                \ 0r $HOME/Templates/html_document.html
augroup END "}}}

" End Customized file types }}}

" ** Abbreviations {{{
" Insert date (and maybe time)
:iab <expr> dts strftime("%F %R")    "Date/time stamp
:iab <expr> dtg strftime("%e %b %Y") "Date style used in genealogy

" for QIF files
:iab ckng MAutopay<CR>LAssets:Current Assets:Capital One 360:Checking

" End Abbreviations }}}

" ** Plugins {{{
packadd! matchit

"" Make netrw look like NERDtree {{{2
"" https://shapeshed.com/vim-netrw/
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_winsize = 25
""augroup ProjectDrawer
"  "autocmd!
"  "autocmd VimEnter * :Vexplore
""augroup END
" End netrw-to-NERDtree }}}
" End Plugins }}}

" ** Miscellaneous stuff {{{
" automatically leave insert mode after 'updatetime' milliseconds of inaction
" https://vim.fandom.com/wiki/To_switch_back_to_normal_mode_automatically_after_inaction
au CursorHoldI * stopinsert

" Use a line cursor within insert mode and a block cursor everywhere else.
" https://www.youtube.com/watch?v=FcQjTXLrVUU&t=198s
" Reference chart of values:{{{2
"   Ps = 0  -> blinking block.
"   Ps = 1  -> blinking block (default).
"   Ps = 2  -> steady block.
"   Ps = 3  -> blinking underline.
"   Ps = 4  -> steady underline.
"   Ps = 5  -> blinking bar (xterm).
"   Ps = 6  -> steady bar (xterm).
" End reference chart }}}
let &t_SI = "\e[6 q" " Steady bar for insert mode
let &t_EI = "\e[2 q" " Steady block for everything else

" Save macro in register d
let @d='gg/last edit\ *:\ *\d/e:nohlRdtsýaggd'

" Set sup a local buffer as a pseudo-word-processor {{{2
function! Writer()
    map j gj
    map k gk
    setlocal formatoptions=t1
    setlocal textwidth=80
    setlocal noautoindent
    setlocal shiftwidth=4
    setlocal tabstop=4
    setlocal expandtab
    setlocal wrap
    setlocal nolist
    setlocal linebreak
    set syntax=markdown
endfunction
com! WR call Writer()
"End Writer function }}}
" End Miscellaneous stuff }}}
